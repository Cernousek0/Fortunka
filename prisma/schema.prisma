// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}



// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
model User {
    id            String    @id @default(cuid())
    name          String
    email         String   @unique
    password      String
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
    bets          Bet[]
    balance      Float    @default(0)
}

model Game {
  id            String    @id @default(cuid())
  sport         String
  team1Name     String    
  team1Score    Int     @default(0)
  team2Name     String
  team2Score    Int     @default(0)
  currentIngameTime Int?    @default(0)
  status        String    @default("Scheduled")// e.g., "Scheduled", "Ongoing", "Completed"
  startTime DateTime
//   winner        String?   // e.g., "Team1", "Team2", "Draw"
  oddsTeam1Win          Float     @default(1.0)
  oddsTeam2Win          Float     @default(1.0)
  oddsOver              Float     @default(1.0)
  oddsUnder             Float     @default(1.0)
  bets          Bet[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Bet {
  id            String    @id @default(cuid())
  type          String    // "Win/Lose ,  "Over/Under"
  prediction    String    // "Team1", "Team2", X, -X;
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  gameId        String
  // gameWinner    String?   @map("winner")
  game          Game      @relation(fields: [gameId], references: [id])
  result        String?   // "Won", "Lost", "Pending"
  amount        Float     // Amount of money bet
  potentialWin  Float     // Amount of money that can be won
  odds          Float     // Odds of the bet
  createdAt     DateTime  @default(now())
}


