// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? // @db.Text
//   access_token      String? // @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? // @db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
model Sport {
  id        String @id @default(cuid())
  name      String @unique
  Games     Game[]
}

model User {
  id                 String              @id @default(cuid())
  name               String
  email              String              @unique
  password           String
  dateOfBirth        DateTime            @db.Date
  emailVerified      DateTime?           
  verificationTokens VerificationToken[]
  depositCode        DepositCode[]
  dateOfRegistration DateTime            @default(now())
  // accounts           Account[]
  // sessions           Session[]
  bets               Bet[]
  balance            Float               @default(10000)
  inviteCode        String              @unique
}

model VerificationToken {
  id        String @id @default(cuid())
  userId String @unique
  token     String @unique
  User      User?  @relation(fields: [userId], references: [id])
}

model DepositCode {
  id         String   @id @default(cuid())
  code       String   @unique
  percentage Int    @default(20)
  User       User?    @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
}

model Game {
  id                String   @id @default(cuid())
  sport             String
  Sport             Sport    @relation(fields: [sport], references: [name])
  team1Name         String
  team1Score        Int      @default(0)
  team2Name         String
  team2Score        Int      @default(0)
  currentIngameTime Int?     @default(0)
  status            String   @default("Scheduled") // "Scheduled", "Ongoing", "Completed"
  startTime         DateTime
  oddsTeam1Win      Float    @default(1.0)
  oddsTeam2Win      Float    @default(1.0)
  oddsOver          Float    @default(1.0)
  oddsUnder         Float    @default(1.0)
  breakPoint        Int      @default(0)
  bets              Bet[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Bet {
  id           String   @id @default(cuid())
  type         String // "Win/Lose , "Over/Under"
  prediction   String // "Team1", "Team2", X, -X;
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  gameId       String
  game         Game     @relation(fields: [gameId], references: [id])
  result       String? // "Won", "Lost", "Pending"
  amount       Float    // Amount of money bet
  potentialWin Float    // Amount of money that can be won
  odds         Float    
  boosted      Int      @default(0)
  createdAt    DateTime @default(now())
}
